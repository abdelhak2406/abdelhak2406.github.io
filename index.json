[{"content":"","date":"7 January 2024","permalink":"/","section":"Abdelhak's website!","summary":"","title":"Abdelhak's website!"},{"content":" Link to my resume (in french)\n","date":"7 January 2024","permalink":"/about/","section":"Abdelhak's website!","summary":"Link to my resume (in french)","title":"About"},{"content":"It\u0026rsquo;s all about Automation! # Managing LARGE infrastructures is HARD! imagine having 100s of servers! that you need to configure!\nimagine you DONT know what\u0026rsquo;s inside evey server!\nHay it works here but not there BUT WHYY!!!!\nsomeone added this dark package in server number 32 and 80 but it isnt anywhere else! WHAT CAN WE DOOOO AAAAAAAAAAAAAAAAAAa!! BASH SCRIPTS EVERYWHERE!\nIdempotency : running the program multiple times and have it produice the same result https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html#desired-state-and-idempotency example mkdir example if we want that command to be idempotent mkdir -p example which means if the example exist well nothing will be done! With ansible, idempotency is backed in, sooooo no zillion if statment in your shell script and more easier readability and therefore maintainability! Manual approaches to managing IT infrastructure, such as using scripts or SSH, can be time-consuming, error-prone, and difficult to scale. These methods also lack the ability to enforce standardized processes and configurations, making it challenging to maintain a consistent and secure environment. ==\u0026gt; Automation tools are here for that!! # Automation tools provide a way to automate repetitive, time-consuming tasks such as server provisioning, configuration management, software deployments, and monitoring. Automation tools can help ensure consistency and reliability in IT operations. By using automation to enforce standardized processes and configurations, IT teams can minimize errors and reduce the risk of downtime and security breaches. What is ansible? # Ansible is an\nOpen source, IT automation software application written in Python. It can configure systems, deploy software, and orchestrate advanced workflows to support application deployment, system updates, and more. Ansible’s main strengths are :\nsimplicity and ease of use. It also has a strong focus on security and reliability, featuring minimal moving parts. It uses OpenSSH for transport Uses a human-readable language that is designed for getting started quickly without a lot of training. Getting started: # Ansible architecture # Where to install ansible? in the host? on the server machines?? WHERE?? You only need it in the control host (or whatever it\u0026rsquo;s called! (the workstation in the first image below)) It connects and does it\u0026rsquo;s magic using ssh, it doesn\u0026rsquo;t need anything else! Installation # You only need to install it on the Management node machine!\nUsing Python pip Using pip (check if pip is available)\nensure pip is availible https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#ensuring-pip-is-available then install: python3 -m pip install --user ansible On specific operationg System\nWinDows\u0026hellip; CANNOT RUN only Manage Windows hosts! but you can use WSL https://docs.ansible.com/ansible/latest/os_guide/windows_faq.html#can-ansible-run-on-windows Fedora sudo dnf install ansible Ubuntu: (using Ppa) sudo apt update sudo apt install software-properties-common sudo add-apt-repository --yes --update ppa:ansible/ansible sudo apt install ansible Keywords # Modules roles tags Ansible playbooks plays tasks hosts inventory Conditions handlers Basic SSH! # Since Ansible uses ssh to connect into a remote server. We need to know a little bit about ssh so.\nConnect through ssh with terminal ssh user@ipaddress ssh goku@192.168.122.165 ssh 192.168.122.165 check your ~/.ssh/known_hosts file! Create ansible specific key (apparently it\u0026rsquo;s safer!) ssh-keygen -t ed25519 -C \u0026#34;write a comment here\u0026#34; -t: specifying the key type -C: comment -f: if you want to specify the filepath(and name) ssh-keygen -t ed25519 -f ~/.ssh/ansible2 -C \u0026#34;this is a comment\u0026#34; add ssh key into a server! ssh-copy-id -i path/to/key.pub ipadress ssh-copy-id -i ~/.ssh/ansible.pub 123.123.123.123 check ~/.ssh/autorized_keys Fedora Workstation https://www.linuxcapable.com/how-to-install-and-enable-ssh-on-fedora-linux/ https://linuxconfig.org/how-to-install-start-and-connect-to-ssh-server-on-fedora-linux you need to enable and start sshd sudo ss -lt : check open ports? i think Running Ah-Hoc Commands # https://docs.ansible.com/ansible/latest/command_guide/cheatsheet.html#ansible-cli-cheatsheet Now that we connected throuh ssh and granted ourself the permissions to connect to the server let\u0026rsquo;s run some basic commands: ansible all --key-file ~/.ssh/ansible -i inventory -m ping ansible rocky_servers --key-file -i inventory -m ping Inventory! # The inventory is simply a file where we define all our servers and cloud instances that Ansible will manage\nHow to create it ? We just create a file and put the IP adress for example : [ubuntu_servers] 192.168.122.165 192.168.122.116 [rocky_servers] 192.168.122.153 or witout any specifications\n192.168.122.165 192.168.122.116 192.168.122.153 Ansible supports several ways to have inventories: https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#how-to-build-your-inventory cfg file # Is a file in which you can define some configuration such as the path to the ssh key, the remote_username that ansible will use to connect to the servers the path to the inventory file, and many other things..\nhttps://docs.ansible.com/ansible/latest/reference_appendices/config.html#ansible-configuration-settings\nNAME IT ansible.cfg: that\u0026rsquo;s how ansible does it.\nexample of a config file\n[defaults] inventory = inventory private_key_file = ~/.ssh/ansible remote_user = goku Let\u0026rsquo;s run our previous command now ansible all --key-file ~/.ssh/ansible -i inventory -m ping ansible all -m ping List all your adresses ansible all --list-hosts ansible ubuntu_servers --list-all # specify category Get a ton of informations about the servers! ansible all -m gather_facts ansible all -m gather_facts --limit 192.168.122.153 ansible localhost -m gather_facts # localhost facts! Update servers ansible all -m apt -a update_cache=true --become --ask-become-pass this is the equivalent of doit sudo apt update\n-m apt : use the apt module (package manager) -a argument for the apt , which in this case means update the cache --become or -b : allow us to run it with root privileges (sudo) --ask-become-pass or -K allow us to prompt the request for the password Modules # https://docs.ansible.com/ansible/latest/plugins/module.html#modules In Ansible, Modules are small pieces of code that perform specific tasks on the managed servers. Modules can be used to perform a wide range of tasks, including file manipulation, package installation, service management, user management, and more. For example the module ping\nPing yourself:\nansible localhost -m ping the apt module is used for installing packages! or updating them for example\nAnsible ships with A LOT of modules , but you can also create your own modules or use community built ones ( check ansible galaxy)\nArguments # Modules take arguments for example :\nansible all -m apt -a update_cache=true udate_cache is an argument! which takes the value true Playbooks # PLAYBOOK\nPLAY Tasks In Ansible, playbooks are YAML files that define the tasks to be performed on the managed servers.\nPlaybooks provide a way to define the automation workflows that Ansible will execute, using a simple, human-readable syntax.\nEach playbook consists of one or more plays which define a set of tasks to be performed on a specific set of servers. Each task in a play maps to an Ansible module, which performs a specific action on the managed servers.\nPlays provide a way to organize tasks and modules into logical groups, based on the servers or groups of servers they target.\nFor example, a playbook might have a play that installs and configures web servers, and another play that sets up database servers. A play consists of (generally!):\n- name: (optional, but recommended) hosts: tasks: update and upgrade (autoremove for removing unused packages) - name: Update and upgrade packages on Debian/Ubuntu servers hosts: my_servers become: true tasks: - name: Update package cache apt: update_cache: yes - name: Upgrade packages apt: upgrade: yes autoremove: yes example of a playbook installing appache2 and update ! - hosts: all become: true tasks: - name: update repository index apt: update_cache: yes - name: install apache2 package apt: name: apache2 state: latest - name: add php support for apache apt: name: libapache2-mod-php state: latest uninstall appache - hosts: all become: true tasks: - name: install apache2 package apt: name: apache2 state: absent - name: add php support for apache apt: name: libapache2-mod-php state: latest Another example for fedora! - name: setup Fedora my own way! (this is a play!) hosts: localhost connection: local become: true pre_tasks: - name: Enable the RPM Fusion repository dnf: name: \u0026#34;https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ansible_distribution_major_version}}.noarch.rpm\u0026#34; state: present when: ansible_distribution == \u0026#39;Fedora\u0026#39; - name : update and upgrade packages! tasks: - name: install packages package: name: - htop - tmux - vim - neovim - flatpak - name: setup Ubuntu (this is another play) hosts: ubuntu_servers become: true tasks: - name: update repository index apt: update_cache: yes Running playbook ansible-playbook --ask-become-pass your_playbook.yml ansible-playbook -K your_playbook.yml \u0026ldquo;when\u0026rdquo; # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_conditionals.html#basic-conditionals-with-when\n- name: setup Fedora my own way! (this is a play!) hosts: localhost connection: local become: true tasks: - name: Enable the RPM Fusion repository dnf: name: \u0026#34;https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ansible_distribution_major_version}}.noarch.rpm\u0026#34; state: present when: ansible_distribution == \u0026#39;Fedora\u0026#39; when: ansible_facts['os_family'] == \u0026quot;Debian\u0026quot; we can get the ansible distribution with the gather facts! command\n\u0026ldquo;tags\u0026rdquo; # only run plays and tasks tagged with these values\nyou can have one or more tags\nexample of tags:\n- name: update rpm repo hosts: localhost connection: local become: true tasks: - name: Enable the RPM Fusion repository tags : always dnf: name: \u0026#34;https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ansible_distribution_major_version}}.noarch.rpm\u0026#34; state: present when: ansible_distribution == \u0026#39;Fedora\u0026#39; - name : update tags : always dnf: update_cache: yes to run tasks of specific tags\nansible-playbook --ask-become-pass -t tagname your_playbook.yml Copy files :\n- name : copy some file tags: html, soydev copy: src: your/file/path/local dest: where/to/put/it/in/server owner: goku group: goku mode : 0664 Unarchive (and download for DA internet!) name : download uprchive and all the good things! tags: html, soydev unarchive: src: https://releases.hashicorp.com/terraform/1.3.9/terraform_1.3.9_linux_amd64.zip dest: /usr/local/bin/ remote_src: yes mode : 0755 owner: root group: root Services : - name: install the appache and php hosts: rocky_servers become : true tasks: - name: install apache2 package dnf: name: - php - httpd # state: absent - name: start httpd service service: name: httpd state: started Add users! check /etc/passwd before and after - name: add user hosts: all become : true tasks: - name: create a new user (named klibsou ) user: name: klibsou groups: root https://docs.ansible.com/ansible/latest/collections/ansible/builtin/user_module.html - name: delete user hosts: fedora_workstation become : true tasks: - name: delete user (named klibsou ) user: name: klibsou groups: root state: absent remove: true Roles # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html#roles In Ansible, roles are a way to\norganize and reuse playbooks, by grouping related tasks, variables, and files into a self-contained unit.\nA role is essentially a directory structure that contains all of the resources needed to perform a specific task or set of tasks.\nRoles provide a way to break down complex playbooks into\nsmaller more manageable components making it easier to share and reuse automation code across different projects and teams. They also promote modularity and maintainability, since each role can be developed and tested independently of the rest of the playbook. So let\u0026rsquo;s take do that!\nCreate the directory name roles every sub directory is a role inside a role directory you NEED to have one of these folders tasks handlers library defaults vars files templates meta Another way to say it \u0026ldquo;An Ansible role has a defined directory structure with eight main standard directories. You must include at least one of these directories in each role. You can omit any directories the role does not use.\u0026rdquo; example! IM lazy let\u0026rsquo;s just use the example of this guy and one by chatGpt myproject/ ├── playbook.yml └── roles └── myrole ├── tasks └── main.yml playbook.yml - name: Configure myserver hosts: myserver become: true roles: - myrole backround_image source : \u0026ldquo; https://pantheon.tech/wp-content/uploads/2019/04/ansible.png\"\n","date":"7 January 2024","permalink":"/posts/ansible/","section":"Posts","summary":"It\u0026rsquo;s all about Automation!","title":"Ansible"},{"content":"","date":"7 January 2024","permalink":"/tags/automation/","section":"Tags","summary":"","title":"automation"},{"content":"","date":"7 January 2024","permalink":"/tags/iac/","section":"Tags","summary":"","title":"iac"},{"content":"","date":"7 January 2024","permalink":"/tags/linux/","section":"Tags","summary":"","title":"linux"},{"content":"General # adduser user_name: add a new user useradd : another type of commend! What\u0026rsquo;s the difference between the two? cat /etc/passwd : display the list of the users deluser user_name : delete a user passwd user_name: change passworld for the user Every file created by a user is automatically owned by it\u0026rsquo;s primary group That can be files that are owned by secondary groups too! addgroup group_name : create a new group usermod -a -G group_name user_name : add user to a group! (we can do -aG directly) groups username : check who are the groups that a user belongs to gpasswd -d username group_name : delete user from a group delgroup groupname : delete a group Groups # A collection of user that have the same privileges\nusers have a \u0026ldquo;primary\u0026rdquo; and a \u0026ldquo;secondary\u0026rdquo; group, by default when we create a user it\u0026rsquo;s gonna greate a group with the same name as the user, and add the user into it! and this is the \u0026ldquo;primary group\u0026rdquo; We have 1 primary group and up to 15 secondary groups cat /etc/group All permissions for groups are inside a sudoers file find out where this file is! to modify this file we do visudo we just follow what the comments say and to add permission for a user to add some command, we need to put the full path! LinuxTv way # sudo useradd username : to create a new user!\nif we check /etc/passwd in general IDs from 1000 and above are user related and below are system related sudo useradd -m username: create a user and create home directory for him\nsudo useradd -r username: create a system user\nsystem user is a user that generally runs stuff in the background ect! /etc/default/useradd : contains the defulat for useradd command\nif you wanna change the default alter this file! sudo userdel username: delete a user\nthis doesnt imply that the home directory of the user gets deleted! sudo userdel -r username : delete user AND the HOME directory\npasswd username : change the password of the user!\nWho are the users that are in the system?\ncheck the /home directory , but it\u0026rsquo;s not effective sometimes it\u0026rsquo;s not! better check the /etc/passwd file! each user has it\u0026rsquo;s own line each line is kindof like this : username❌UserID:GroupID: UserInformationField:home_directory:shell_of_user x : essencially means that the password is hashed!(it\u0026rsquo;s a cary over from the old days) UserInformationField: genrally contains the first and last time, it\u0026rsquo;s OPTIONAL shell_of_user: the shell that\u0026rsquo;s gonna startup! /etc/shadow : file that contains the hashed password and other information at the enc ::howmanydays:howmany_days_is_required:how many days the user will be prompted! continue explaining this! Group managment # https://linuxhandbook.com/group-management/\nEvery file is owned by a user and a group\ngroups check what groups the current user are a part of\ngroups username groups that the user belong to.\nsudo groupadd group_name: add group\nsudo groupdel group_name: delete group\nusermod -aG group_name user_name: add user to group\nusermode -g group_name user_name: change the user\u0026rsquo;s primary group!\nDONT DO IT, its just too much work and no one does it gpasswd -a username group_name : add user to group (another way)\n/etc/groups:\nsimilar to /etc/passwd but for groups there is several groupName:group_password:GID:user_members group_password: should apparently not be used because it\u0026rsquo;s not secure somehow he went into /etc/ssh/sshd_config : and added users that are allowed to enter thourgh ssh!\nhe add a line to demonstrate a usercase of using groups there are 2 types of group\nprimary group and secondary group to check the primary group of the user go the toe passwd file and grab the GID check the /etc/group and search for the GID What\u0026rsquo;s the difference between primary and secondary group?\nNOTHING! SKEL directory # In Linux and other Unix-like operating systems, \u0026ldquo;skel\u0026rdquo; is short for \u0026ldquo;skeleton\u0026rdquo;. It is used to refer to the directory /etc/skel, which contains a set of default files and directories that are copied to a new user\u0026rsquo;s home directory when the user is created.\nThe purpose of the skel directory is to provide a set of default settings, files, and directories for new users, so that they start with a basic working environment. The contents of the skel directory are typically customized by the system administrator to match the needs and preferences of the organization or system.\nSome of the files and directories that may be included in the /etc/skel directory are:\n.bashrc - a configuration file for the Bash shell .bash_profile - a script that runs when the user logs in .profile - a shell initialization file that is read by various shells .config/ - a directory for user-specific configuration files .ssh/ - a directory for SSH configuration files and keys .vimrc - a configuration file for the Vim text editor When a new user is created, the contents of the skel directory are copied to the user\u0026rsquo;s home directory and become the basis for the user\u0026rsquo;s initial environment.\nuseradd VS adduser # Both useradd and adduser are commands used to create new users in Linux and other Unix-like operating systems, but they have some differences in their default behavior and options.\nuseradd is a low-level command that is typically used by system administrators to create new users from the command line. It requires a number of options and arguments to specify the user\u0026rsquo;s details, such as username, user ID (UID), home directory, shell, and so on. By default, useradd does not create a home directory, set a password, or create any default configuration files for the new user. The administrator needs to manually specify these options or run additional commands to set them up.\nOn the other hand, adduser is a higher-level command that provides a more user-friendly interface for creating new users. It prompts the administrator for the user\u0026rsquo;s details, such as name, password, home directory, and so on, and automatically creates a home directory, sets a default shell, and creates some default configuration files for the new user. adduser is designed to make the process of creating new users easier and more intuitive for non-expert users or for use cases where the administrator wants to create a user quickly with reasonable defaults.\nIn general, useradd is more suitable for use cases where the administrator wants complete control over the user\u0026rsquo;s details and configuration, and is comfortable with specifying all the options manually. adduser, on the other hand, is more suitable for use cases where the administrator wants a simpler, more intuitive interface for creating new users, and is willing to rely on the default settings and options provided by the command.\nect/sudoers and visudo # visudo command is used to edit the /etc/sudoers file, which contains the configuration settings for the sudo command. The visudo command is designed to prevent accidental or malicious errors in the sudoers file by checking the syntax and preventing simultaneous edits by multiple users.\nThe visudo command opens the sudoers file in a text editor, typically vi or vim, and allows the administrator to make changes to the file. When the administrator saves and exits the editor, visudo checks the syntax of the sudoers file and alerts the user if any errors are found.\nThe sudoers file is located in the /etc/ directory, and is usually only editable by the root user or by users with sudo privileges. Therefore, the full path to the sudoers file is /etc/sudoers.\nIt is important to note that the sudoers file should only be edited using the visudo command, as making manual edits to the file can easily result in syntax errors or security vulnerabilities that could compromise the system.\n","date":"7 January 2024","permalink":"/posts/manage-users-linux/","section":"Posts","summary":"General # adduser user_name: add a new user useradd : another type of commend!","title":"Mange users in linux"},{"content":"","date":"7 January 2024","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"7 January 2024","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"Git related # https://docs.gitea.io/en-us/ gitlab.com https://codeberg.org/ https://sourcehut.org/ https://git.disroot.org/ ( https://disroot.org/en) so let\u0026rsquo;s talk about disroot for a second, they have a ton of services for example share file encryped create a file that you can collaborate on , ect AND NO you dont always need an account! https://github.com/MichaelMure/git-bug https://github.com/jmforsythe/Git-Heat-Map https://github.com/arxanas/git-branchless https://github.com/initialcommit-com/git-sim (mac) https://github.com/gitx/gitx https://docs.gitstream.cm/ https://initialcommit.com Ai related # jupytext Cast # https://fcast.org/ Pdf readers # https://pwmt.org/projects/zathura/ productivity # https://logseq.com/ coding : # https://github.com/eranif/codelite ","date":"14 August 2023","permalink":"/awesome-websites/","section":"Abdelhak's website!","summary":"Git related # https://docs.","title":"Awesome Websites"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]